version: 2
jobs:
  # Build a .deb package for amd64 platforms.
  build-amd64:
    docker:
      - image: minimsecure/circleci-debian-amd64:stretch-slim
    steps:
      - checkout
      - run:
          name: Build unum and .deb
          command: |
            if [[ ! -z "$CIRCLE_TAG" ]]; then
              BUILD_VERSION=${CIRCLE_TAG/v/}
            fi
            ./dist/make_dotdeb.sh $BUILD_VERSION
      - store_artifacts:
          path: out/linux_generic
          destination: build

  # Build a .deb package for armhf platforms.
  build-armhf:
    machine: true
    steps:
      - run:
          name: Install qemu-arm-static
          command: |
            sudo apt-get update
            sudo apt-get install -y qemu-user-static
      - checkout
      - run:
          name: Start armhf build container
          command: |
            docker run -v "$PWD:/root/unum-sdk" \
              -v /usr/bin/qemu-arm-static:/usr/bin/qemu-arm-static \
              --rm --name builder -dti minimsecure/circleci-debian-armhf:stretch-slim
      - run:
          name: Build unum and .deb
          command: |
            if [[ ! -z "$CIRCLE_TAG" ]]; then
              BUILD_VERSION=${CIRCLE_TAG/v/}
            fi
            docker exec -t builder /bin/bash -c \
              "cd /root/unum-sdk
              ./dist/make_dotdeb.sh $BUILD_VERSION"
      - store_artifacts:
          path: out/linux_generic
          destination: build

  # Build the "extras" Docker images: unum which is an Ubuntu 16.04 base with
  # hostapd, dnsmasq, and the Unum agent installed, unum-builder which can be
  # used to build the Unum agent.
  build-docker:
    machine: true
    environment:
      DOCKER_TAG: "debian-stretch-slim"
    steps:
      - checkout
      - run:
          name: Build unum-builder image
          command: |
            ln -sf $(readlink -e extras/docker/dockerignore) .dockerignore
            if [[ ! -z "$CIRCLE_TAG" ]]; then
              BUILD_VERSION=${CIRCLE_TAG/v/}
            fi
            if [[ ! -z "$BUILD_VERSION" ]]; then
              BUILD_ARG_OPT="--build-arg unum_version=$BUILD_VERSION"
            fi
            docker image build --file extras/docker/Dockerfile.build $BUILD_ARG_OPT --tag "minimsecure/unum-builder:$DOCKER_TAG" .
            mkdir -p out
            docker image save -o out/unum-builder_$DOCKER_TAG.dockerimg "minimsecure/unum-builder:$DOCKER_TAG"
      - run:
          name: Build unum image
          command: |
            ln -sf $(readlink -e extras/docker/dockerignore) .dockerignore
            docker image build --file extras/docker/Dockerfile --tag "minimsecure/unum:$DOCKER_TAG" .
            mkdir -p out
            docker image save -o out/unum_$DOCKER_TAG.dockerimg "minimsecure/unum:$DOCKER_TAG"
      - run:
          name: Publish image to dockerhub
          command: |
            if [[ -z "$DOCKER_USER" ]] || [[ -z "$DOCKER_PASS" ]]; then
              echo "docker credentials unset, skipping upload"
            else
              echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
              docker push "minimsecure/unum-builder:$DOCKER_TAG"
              docker push "minimsecure/unum:$DOCKER_TAG"
            fi
      - store_artifacts:
          path: out
          destination: build

  # Build and publish a Debian 9-based armhf container with the necessary
  # dependencies for building Unum.
  # TODO: currently builds use armv7 instructions-- possible to limit to Pi 2's strange armv6?
  build-armhf-builder:
    machine: true
    steps:
      - run:
          name: Install qemu-arm-static
          command: |
            sudo apt-get update
            sudo apt-get install -y qemu-user-static
      - checkout
      - run:
          name: Start armhf build container
          command: |
            docker run -v "$PWD:/root/unum-sdk" \
              -v /usr/bin/qemu-arm-static:/usr/bin/qemu-arm-static \
              --rm --name builder -dti arm32v7/debian:stretch-slim
      - run:
          name: Install build dependencies in armhf container
          command: |
            docker exec -t builder bash -c \
             'apt-get update
              apt-get install -y build-essential git \
                                 libcurl4-openssl-dev libjansson-dev \
                                 libnl-3-dev libnl-genl-3-dev \
                                 libssl-dev debhelper'
      - run:
          name: Create new image from armhf container
          command: |
            docker commit \
              --author "Minim Labs labs@minim.co" \
              --message "Add build dependencies for unum-sdk" \
              --pause builder \
              minimsecure/circleci-debian-armhf:stretch-slim
            mkdir -p out
            docker image save \
              -o out/armhf-stretch-slim.dockerimg \
              minimsecure/circleci-debian-armhf:stretch-slim
      - run:
          name: Publish image to dockerhub
          command: |
            if [[ -z "$DOCKER_USER" ]] || [[ -z "$DOCKER_PASS" ]]; then
              echo "docker credentials unset, skipping upload"
            else
              echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
              docker push "minimsecure/circleci-debian-armhf:stretch-slim"
            fi
      - store_artifacts:
          path: out
          destination: build

  # Build and publish a Debian 9-based amd64 container with the necessary
  # dependencies for building Unum.
  build-amd64-builder:
    machine: true
    steps:
      - checkout
      - run:
          name: Build unum-builder image
          command: |
            docker image build --tag "minimsecure/circleci-debian-amd64:stretch-slim" .circleci/debian-amd64
            mkdir -p out
            docker image save -o out/amd64-stretch-slim.dockerimg "minimsecure/circleci-debian-amd64:stretch-slim"
      - run:
          name: Publish image to dockerhub
          command: |
            if [[ -z "$DOCKER_USER" ]] || [[ -z "$DOCKER_PASS" ]]; then
              echo "docker credentials unset, skipping upload"
            else
              echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
              docker push "minimsecure/circleci-debian-amd64:stretch-slim"
            fi
      - store_artifacts:
          path: out
          destination: build

workflows:
  version: 2

  # The "snapshot" workflow runs for all commits on any branch
  snapshot:
    jobs:
      - build-amd64
      - build-armhf
      - build-docker

  # The "release" workflow runs only for tagged commits.
  release:
    jobs:
      - build-amd64:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - build-armhf:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - build-docker:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
