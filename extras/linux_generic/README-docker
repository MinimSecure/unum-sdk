Unum and Docker

Current status: in development

The files in this folder are used to build and start a Docker container
complete with everything necessary to run as a Linux router, including the
Unum agent.

For the Unum agent to function, a Minim Labs developer account is required.
Sign up for an account at https://my.minim.co/developers/sign_up


Known Limitations

As this is a work-in-progress, some things are not yet working:

 - Can only run on Linux hosts because of the `macvlan` Docker network used.
   This may not be necessary, but has not been explored.
 - Wireless AP does not start (`sbin/start_hostapd.sh` is incomplete)


Building and Starting

Run the `docker_build.sh` script under `extras/linux_generic/` to build a
new image and then start a container and configure it for use.

On Linux, the script must be run as root or have access to the docker daemon.
From the unum root directory, assuming your host WAN interface is "ens33":
    sudo extras/linux_generic/docker_build.sh ens33

Usage: extras/linux_generic/docker_build.sh [-X|-B <builder>] <WAN ifname>

The WAN interface name (`<WAN ifname>` above) should be the host machine's
internet-connected interface. A bridge is created between the host and Unum
container and this is used as the WAN interface on the container.

Skip building an image at all by passing `-X`.
    sudo extras/linux_generic/docker_build.sh -X ens33

Skip building a builder image, but recreate and configure the Unum container:
    sudo extras/linux_generic/docker_build.sh \
        -B unum-builder-ubuntu:16.04 ens33


Starting Unum

Once the container is running, you'll be placed into a bash session running in
the container. Before Unum can start, the container's LAN ethernet's MAC address
must be updated using `ifconfig`:
    ifconfig eth2 hw ether <generated MAC>

The `<generated MAC>` is generated by the Minim cloud application, and requires
a Minim Labs developer account.
Sign up at https://my.minim.co/developers/sign_up then use the MAC address
shown in the Provisioning Details page.

With the LAN MAC address changed, start everything with `startup.sh`:
    startup.sh


Overview

There are two Docker images generated by the build, a "builder" and the actual
Unum-enabled Linux router image.

The "builder" image, built from `Dockerfile.build`, has all of the build-time
dependencies installed on an Ubuntu 16.04 base. When started, the container
will run the unum `build.sh` script and generate a tarball in
`/usr/local/unum/out/` (inside the container). This tarball is used in the
second stage of the process to install Unum.

The router image is built from `Dockerfile` and includes: dnsmasq, hostapd,
iptables, the Unum agent, and a host of other programs for running a Linux
router. Additionally, several shell scripts are included to manage the
configuration and startup of all the services.

 - `startup.sh` (re)starts everything
 - `start_networking.sh` configures the network interfaces
 - `start_dnsmasq.sh` generates a dnsmasq.conf file and starts dnsmasq
 - `start_hostapd.sh` generates a hostapd.conf file and starts hostapd
 - `start_routing.sh` configures iptables and enables IP forwarding
 - `stop_all.sh` stops all the services.
 - `/opt/unum/extras/sbin/unum_env.sh` is a library script that can be sourced
   in bash sessions but is largely redundant.

Configuration files are stored in `/etc/opt/unum`
Log files and other runtime files are stored in `/var/opt/unum`
Unum and co are installed in `/opt/unum`
